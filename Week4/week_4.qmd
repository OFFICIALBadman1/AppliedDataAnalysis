title: "Week 4 – Global Superstore: Advanced R visuals for Power BI"
author: "Isak Jonsson Zachari"
date: "`r format(Sys.Date())`"
format:
  html:
    toc: true
    toc-location: left
    code-fold: true
    code-tools: true
execute:
  echo: true
  warning: false
  message: false
--------------

# About this notebook

This Quarto document prepares **advanced `ggplot2` visuals** and the underlying data wrangling you can copy into the **R script visual** in Power BI. It also includes short explanations of **what each visual shows** and **why it adds value beyond standard Power BI visuals**. Keep this file with your dataset so you can reproduce the figures instantly during the exam.

> Dataset: `global_superstore_2016.xlsx` (sheets: *Orders*, *Returns*, *People*).

---

# 1) Libraries & theme

```{r}
library(readxl)
library(dplyr)
library(tidyr)
library(stringr)
library(forcats)
library(ggplot2)
library(scales)

# clean minimal look across plots
base_theme <- theme_minimal(base_size = 12) +
  theme(
    plot.title   = element_text(hjust = 0.5, face = "bold"),
    plot.subtitle= element_text(hjust = 0.5),
    axis.title   = element_text(face = "bold"),
    legend.position = "none"
  )

theme_set(base_theme)
```

# 2) Import – keep sheets separate

```{r}
path <- "Week4/global_superstore_2016.xlsx"  # <- adjust if your path differs
orders  <- read_excel(path, sheet = "Orders")
returns <- read_excel(path, sheet = "Returns")
people  <- read_excel(path, sheet = "People")

# sanity checks used in oral explanation
stopifnot(all(c("Sales","Profit","Discount","Category","Sub-Category","Market","Segment",
               "Order Date","Ship Date","Ship Mode") %in% names(orders)))
```

## Missing-data snapshot (for talking points)

```{r}
quick_na <- list(
  Orders  = colSums(is.na(orders)),
  Returns = colSums(is.na(returns)),
  People  = colSums(is.na(people))
)
quick_na
```

# 3) Helpful transformations (once)

```{r}
orders_t <- orders %>%
  mutate(
    profit_margin = Profit / Sales,                      # unitless (fraction)
    lead_time     = as.numeric(difftime(`Ship Date`, `Order Date`, units = "days")),
    # guard against weird negative diffs in the file (data quality)
    lead_time     = ifelse(lead_time < 0, NA, lead_time),
    # reorder categories to a consistent order in plots
    Category      = fct_infreq(Category)
  )
```

## Quick descriptive summaries (useful to cite during demo)

```{r}
summary_tbl <- orders_t %>%
  summarise(
    n_orders      = n(),
    med_margin    = median(profit_margin, na.rm = TRUE),
    mean_discount = mean(Discount, na.rm = TRUE),
    med_lead_days = median(lead_time, na.rm = TRUE)
  )
summary_tbl
```

---

# 4) Visual A – Profit margin by **Category** (violin + jitter)

This combines a **distribution view** (violin) with **raw observations** (jitter). Standard PBI does not offer violin plots, so this is a good candidate for the R visual. Outliers are informative here (loss-making items below 0%).

```{r}
fig.width=7; fig.height=9
orders_t %>%
  ggplot(aes(x = Category, y = profit_margin, fill = Category)) +
  geom_violin(trim = FALSE, alpha = 0.5) +
  geom_jitter(width = 0.15, alpha = 0.35, size = 0.6) +
  scale_y_continuous(labels = percent_format(accuracy = 1)) +
  labs(title = "Profit Margin per Category", y = "Profit Margin (%)", x = "Category")
```

**Reading the plot.** Wider sections indicate more orders around that margin; long tails below 0% highlight **loss-making** orders. Use this to discuss pricing/discount policy by category.

---

# 5) Visual B – Profit margin for **Top-5 Sub‑Categories by Sales**

We first identify the five sub-categories with the highest total sales, then repeat the margin violin. Reordering by sales makes the message crisp.

```{r}
# find top-5 by sales
top5_subcats <- orders_t %>%
  group_by(`Sub-Category`) %>%
  summarise(total_sales = sum(Sales, na.rm = TRUE), .groups = "drop") %>%
  slice_max(total_sales, n = 5) %>%
  arrange(desc(total_sales))

orders_top5 <- orders_t %>%
  semi_join(top5_subcats, by = "Sub-Category") %>%
  mutate(`Sub-Category` = fct_reorder(`Sub-Category`, Sales, .fun = sum, .desc = TRUE))

orders_top5 %>%
  ggplot(aes(x = `Sub-Category`, y = profit_margin, fill = `Sub-Category`)) +
  geom_violin(trim = FALSE, alpha = 0.6) +
  geom_jitter(width = 0.15, alpha = 0.35, size = 0.6) +
  scale_y_continuous(labels = percent_format(accuracy = 1)) +
  labs(title = "Profit Margin for Top 5 Sub‑Categories by Sales",
       y = "Profit Margin (%)", x = "Sub‑Category")
```

**Reading the plot.** Compare dispersion and negative tails across your best sellers; a sub‑category with **high sales but many negative margins** is a prime target for pricing or cost action.

---

# 6) Visual C – **Lead time** distribution (days)

This uses a histogram to reveal operational patterns (e.g., *Same Day*, *First/Second Class*, *Standard*). Quick anomalies (negatives) were filtered to NA.

```{r}
orders_t %>%
  ggplot(aes(x = lead_time)) +
  geom_histogram(binwidth = 1, color = "white") +
  labs(title = "Distribution of Lead Time (days)", x = "Lead time (days)", y = "Orders")
```

**Reading the plot.** Clusters near 0–1 days vs 3–6 days often mirror shipping modes. Combine with a slicer on *Ship Mode* in Power BI to compare service levels.

---

# 7) Visual D – **Discount vs Profit** across Markets & Segments

A faceted scatter with a light trend helps you show where discounts correlate with losses. This is another view that benefits from the flexibility of the R visual.

```{r}
orders_t %>%
  ggplot(aes(x = Discount, y = Profit)) +
  geom_point(alpha = 0.35, size = 0.8) +
  geom_smooth(method = "loess", se = FALSE) +
  facet_grid(rows = vars(Segment), cols = vars(Market)) +
  labs(title = "Discount vs Profit by Market and Segment",
       x = "Discount (fraction)", y = "Profit ($)")
```

**Reading the plot.** Downward trends indicate segments/markets where discounting erodes profitability faster. Use this to set **discount thresholds** or **approval rules**.

---

# 8) Small KPIs (tables you can paste to Power BI as needed)

These support narration during the demo and are easy to reproduce.

```{r}
# Most common ship mode
orders_t %>% count(`Ship Mode`, sort = TRUE) %>% mutate(share = n/sum(n))

# Median profit margin by Category
orders_t %>% group_by(Category) %>% summarise(median_margin = median(profit_margin, na.rm = TRUE))

# Top countries by profit (useful to map in Power BI)
orders_t %>% group_by(Country) %>% summarise(total_profit = sum(Profit, na.rm = TRUE)) %>% slice_max(total_profit, n = 10)
```

---

# 9) How to integrate these in **Power BI** (R script visual)

1. Install R locally and ensure packages abo

measure 'Total Sales' = SUM(Orders[sales])
	formatString: "$#,##0"
	lineageTag: [unique-id]

measure 'Total Profit' = SUM(Orders[profit])
	formatString: "$#,##0"
	lineageTag: [unique-id]

measure 'Total Orders' = COUNTROWS(Orders)
	formatString: "#,##0"
	lineageTag: [unique-id]

measure 'Avg Order Value' = DIVIDE([Total Sales], [Total Orders], 0)
	formatString: "$#,##0.00"
	lineageTag: [unique-id]

measure 'Return Rate' = 
	DIVIDE(
		COUNTROWS(Returns),
		[Total Orders],
		0
	)
	formatString: "0.00%"
	lineageTag: [unique-id]

measure 'Profit Margin %' = 
	DIVIDE(
		[Total Profit],
		[Total Sales],
		0
	)
	formatString: "0.00%"
	lineageTag: [unique-id]